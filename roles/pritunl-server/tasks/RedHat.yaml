---
- name: Enable EPEL Repository on REHL 8
  dnf:
    name: ["epel-release", "elrepo-release"]
    state: latest
  become: True
  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '8'

- name: Enable EPEL Repository on REHL 7
  yum:
    name: ["epel-release", "elrepo-release"]
    state: latest
  become: True
  when: ansible_facts['os_family'] == 'RedHat' and ansible_facts['distribution_major_version'] == '7'

- name: Copy out the pritunl repo file
  template:
    src: "pritunl-RedHat.j2"
    dest: /etc/yum.repos.d/pritunl-RedHat.repo

- name: Import gpg key
  shell: "{{ item }}"
  with_items:
    - gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys 7568D9BB55FF9E5287D586017AE645C0CF8E292A
    - gpg --armor --export 7568D9BB55FF9E5287D586017AE645C0CF8E292A > key.tmp; sudo rpm --import key.tmp; rm -f key.tmp

- name: Installing wireguard
  dnf:
   name: ['kmod-wireguard', 'wireguard-tools']
   state: latest
  notify: reboot host

- name: Installing pritunl
  dnf:
   name: "pritunl"
   state: latest

- name: Replacing openvpn for pritunl-openvpn
  dnf:
   name: "pritunl-openvpn"
   state: latest
   allowerasing: yes

- name: "Increase open file limits"
  block:
  - name: Increase open file limit
    pam_limits:
      domain: "*"
      limit_type: hard
      limit_item: nofile
      value: 64000

  - name: Increase open file limit
    pam_limits:
      domain: "*"
      limit_type: soft
      limit_item: nofile
      value: 64000

  - name: Increase open file limit
    pam_limits:
      domain: root
      limit_type: hard
      limit_item: nofile
      value: 64000

  - name: Increase open file limit
    pam_limits:
      domain: root
      limit_type: soft
      limit_item: nofile
      value: 64000
  when: pritunl_increase_open_limit_file

- name: Set CAP_NET_BIND_SERVICE=+eip on /usr/bin/openvpn
  community.general.capabilities:
    path: /usr/bin/openvpn
    capability: CAP_NET_BIND_SERVICE+eip
    state: present

# - name: Set CAP_NET_BIND_SERVICE=+eip on /usr/bin/pritunl/bin/python2
#   community.general.capabilities:
#     path: /usr/bin/pritunl/bin/python2
#     capability: CAP_NET_BIND_SERVICE+eip
#     state: present

# - name: Set CAP_NET_BIND_SERVICE=+eip on /usr/bin/pritunl
#   community.general.capabilities:
#     path: /usr/bin/pritunl
#     capability: CAP_NET_BIND_SERVICE+eip
#     state: present

- name: Check to see if semodule is loaded
  shell: "semodule -l | grep -i 'pritunl-openvpn'"
  register: grep_output
  failed_when: "grep_output.rc == 2"
  ignore_errors: true

- name: Installing setools
  dnf:
   name: "setools"
   state: latest
  when: grep_output.stdout == ""

- name: Copy out the pritunl openvpn selinux policy file
  copy:
    src: files/pritunl-openvpn.cil
    dest: ~/pritunl-openvpn.cil
  when: grep_output.stdout == ""

- name: Compile SELinux policy
  command: checkmodule -M -m -o ~/pritunl-openvpn.mod ~/pritunl-openvpn.cil
  when: grep_output.stdout == ""

- name: Package SELinux policy
  command: semodule_package -o ~/pritunl-openvpn.pp -m ~/pritunl-openvpn.mod
  when: grep_output.stdout == ""

- name: Load SELinux policy package
  command: semodule -i ~/pritunl-openvpn.pp
  when: grep_output.stdout == ""
  
- name: Remove temporary policy files
  ansible.builtin.file:
    path: ~/pritunl-openvpn.*
    state: absent
  when: grep_output.stdout == ""

- name: Installing ufw
  yum:
   name: "ufw"
   state: latest

- name: Start service firewall, if not started
  ansible.builtin.service:
    name: ufw
    state: started
    enabled: yes

- name: Allow all access to udp port 443 (OpenVPN)
  community.general.ufw:
    rule: allow
    port: '443'
    proto: udp

- name: Allow all access to TCP port 443 (WebUI)
  community.general.ufw:
    rule: allow
    port: '443'
    proto: tcp

- name: Allow all access to udp port 51820 (Wireguard)
  community.general.ufw:
    rule: allow
    port: '51820'
    proto: udp

- name: "Limit SSH port"
  community.general.ufw:
    rule: limit
    port: ssh
    proto: tcp

# sudo ufw default deny incoming
- name: Firewall default to deny incomming
  community.general.ufw:
    default: deny
    direction: incoming
# sudo ufw default allow outgoing
- name: Firewall default to allow outgoing
  community.general.ufw:
    default: allow
    direction: outgoing

# - name: Installing firewalld
#   yum:
#    name: "firewalld"
#    state: latest

# ### Firewall rules

# - name: permit traffic in public zone for ssh
#   ansible.posix.firewalld:
#     zone: "public"
#     service: ssh
#     permanent: yes
#     state: enabled

# - name: permit traffic in public zone for https service
#   ansible.posix.firewalld:
#     zone: "public"
#     service: https
#     permanent: yes
#     state: enabled

# - name: permit traffic in public zone for 443/udp
#   ansible.posix.firewalld:
#     zone: "public"
#     port: 443/udp
#     permanent: yes
#     state: enabled

# - name: permit traffic in public zone for 51820/udp
#   ansible.posix.firewalld:
#     zone: "public"
#     port: 51820/udp
#     permanent: yes
#     state: enabled

# - name: Start service firewall, if not started
#   ansible.builtin.service:
#     name: firewalld
#     state: started
#     enabled: yes